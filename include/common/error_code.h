#pragma once

#include "common/enum_str.h"
#include <unordered_map>
#include <string>

// This is the custom error code enum
//! [enum]
enum EC {
  EC_OK = 0,
  EC_CODE_BEGIN [[maybe_unused]] = 10000000,
  EC_TX_ABORT,

  EC_MARSHALL_ERROR,
  EC_BUFFER_OVERFLOW,
  EC_INSUFFICIENT_SPACE,
  EC_MESSAGE_SIZE_TOO_LARGE,
  EC_LOCK_ERROR,
  EC_EXSISTING_TRANSACTION,
  EC_NO_SUCH_TRANSACTION,
  EC_IO_ERROR,
  EC_CONFIG_ERROR,

  EC_UNKNOWN_TABLE_ID,

  EC_NOT_LEADER,
  EC_FLOW_CONTROL,

  EC_UNKNOWN,
  EC_SYSTEM_ERROR,
  EC_NOT_IMPLEMENTED,
  EC_PRECONDITION_ERROR,
  EC_INVALID_ARGUMENT,
  EC_CANCELED_ERROR,
  EC_NOT_FOUND_ERROR,
  EC_PERMISSION_ERROR,
  EC_INFEASIBLE_ERROR,
  EC_DUPLICATION_ERROR,
  EC_BROKEN_DATA_ERROR,
  EC_NETWORK_ERROR,
  EC_NET_UNCONNECTED,
  EC_NET_CANNOT_FIND_CONNECTION,
  EC_NET_RESOLVE_ADDRESS_FAIL,
  EC_UNKNOWN_MESSAGE_TYPE,
  EC_APPLICATION_ERROR,
  EC_MESSAGE_HASH_ERROR,
  EC_MESSAGE_LENGTH_ERROR,
  EC_MESSAGE_MAGIC_ERROR,
  EC_MESSAGE_ID_ERROR,
  EC_CASCADE,
  EC_DEADLOCK,
  EC_APPEND_LOG_ERROR,
};

template<>
enum_strings<EC>::e2s_t enum_strings<EC>::enum2str;